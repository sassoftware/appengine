<?xml version="1.0"?>

<!-- 
    Copyright (c) 2008 rPath, Inc.
    All rights reserved
-->

<project basedir="." default="dist" name="rbui">
    
    <!-- Load a user's property file to override settings (first come first server -> lame) -->
    <property file="user.properties"/>
    
    <!-- See if there is an OS property file to load -->
    <condition property="osPropertyFile" value="mac.properties">
        <os family="mac"/>
    </condition>
    
    <!-- Load OS property file -->
    <property file="${osPropertyFile}"/>
    
    <!-- Load our property file -->
    <property file="build.properties"/>
    
    <!-- Include support for flex ant tasks -->
    <taskdef resource="flexTasks.tasks" classpath="${flex.sdk.ant.lib}/${flex.sdk.ant.flextasks.jar}" />

    <target name="test-clean" description="Clean up test data">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${dashboard-build.test.output.dir}">
                <include name="**/*"/>
            </fileset>
        </delete>
    </target>
    
    <target name="build-clean" description="Initialization for building">
        <delete file="${dashboard-build.remote-test.tarball}" quiet="true"/>
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${dashboard-build.bin.dir}">
                <include name="**/*"/>
            </fileset>
            <fileset dir="${dashboard-build.test.dir}">
                <include name="**/*"/>
            </fileset>
        </delete>
    </target>
	
	<target name="build-version" description="Create the build version and timestamp files">
		<echo>Obtaining build version for ${ant.project.name}...</echo>
		
		<!-- Write the version from mercurial -->
        <exec executable="${dashboard-build.test.hg-version.cmd}" outputproperty="build.version"/>
		<echo file="${dashboard-build.bin.version.file}" message="${build.version}"/>
		<loadfile property="build.info.version" srcFile="${dashboard-build.bin.version.file}"/>
		<echo>Current build version is ${build.info.version}</echo>
		
		<!-- Write the date/time stamp -->
        <tstamp>
            <format property="build.timestamp" pattern="MM/dd/yyyy HH:mm:ss"/>
        </tstamp>
        <echo file="${dashboard-build.bin.timestamp.file}" message="${build.timestamp}"/>
		<loadfile property="build.info.timestamp" srcFile="${dashboard-build.bin.timestamp.file}"/>
		<echo>Current build timestamp is ${build.info.timestamp}</echo>
	</target>
    
    <target name="build-init" description="Initialization for building">
    	<mkdir dir="${dashboard-build.bin.dir}" />
        <mkdir dir="${dashboard-build.test.output.dir}" />
    	<mkdir dir="${dashboard-build.test.modules.dir}" />
    	
    	<antcall target="build-version"/>
    </target>
    
    <!-- Target for adding resources/assets -->
    <target name="resources-include" description="Include the necessary resources/assets">
        <copy todir="${dashboard-build.bin.assets.dir}">
            <fileset dir="${core.assets.dir}"/>
        </copy>
    	<copy todir="${dashboard-build.bin.topdir.history}">
            <fileset dir="${dashboard.html-template.history.dir}"/>
        </copy>
    	<copy todir="${dashboard-build.bin.topdir.data}">
            <fileset dir="${dashboard.src.release-data.dir}"/>
        </copy>
    	<copy todir="${dashboard-build.test.data.dir}">
            <fileset dir="${dashboard.src.data.dir}"/>
        </copy>
    	<copy todir="${dashboard-build.bin.topdir}">
            <fileset dir="${dashboard.html-template.dir}" includes="*.js *.swf"/>
        </copy>
    	<copy todir="${dashboard-build.bin.topdir}">
            <fileset dir="${dashboard.config.rbuilder-ui.dir}" includes="*"/>
        </copy>
        <echo>Copied over resources/assets</echo>
    </target>
	
	<!-- Target for prep for install -->
    <target name="prepare-install" description="Prepare for an install">
    	<delete includeemptydirs="true" quiet="true">
            <fileset dir="${dashboard-build.bin.topdir}">
                <include name="**/*.cache"/>
            </fileset>
        </delete>
        <echo>Completing prepping for install</echo>
    </target>
    
    <!-- Target for processing the templates -->
    <target name="build-template" description="Build the template">
        <copy file="${dashboard.swf.template.source}" tofile="${dashboard.swf.template.result}"/>
        <replace file="${dashboard.swf.template.result}" 
            token="$${title}" value="${dashboard.title}"/>
        <replace file="${dashboard.swf.template.result}" 
            token="$${swf}" value="${dashboard.swf.src}"/>
        <replace file="${dashboard.swf.template.result}" 
            token="$${width}" value="${dashboard.swf.width}"/>
        <replace file="${dashboard.swf.template.result}" 
            token="$${height}" value="${dashboard.swf.height}"/>
         <replace file="${dashboard.swf.template.result}" 
            token="$${bgcolor}" value="${dashboard.swf.bgcolor}"/>
        <replace file="${dashboard.swf.template.result}" 
            token="$${application}" value="${dashboard.name}"/>
        <replace file="${dashboard.swf.template.result}" 
            token="$${version_major}" value="${dashboard.swf.flashversion.major}"/>
        <replace file="${dashboard.swf.template.result}" 
            token="$${version_minor}" value="${dashboard.swf.flashversion.minor}"/>
        <replace file="${dashboard.swf.template.result}" 
            token="$${version_revision}" value="${dashboard.swf.flashversion.revision}"/>
        <echo>Built template ${dashboard.swf.template.result}</echo>
    </target>
    
    <!-- Targets for building flex apps -->
    
    <target name="dashboard-build" description="Build the dashboard swf">
    	
    	<!-- Use a copy of the source file since we stamp version in it -->
    	<property name="tmpSrcFile" value="${dashboard-build.bin.dir}/${dashboard.name}.mxml"/>
    	<copy file="${dashboard.src.dir}/${dashboard.name}.mxml" tofile="${tmpSrcFile}" overwrite="true"/>
    	
    	<!-- Add the build version to the source file -->
    	<loadfile property="build.version" srcFile="${dashboard-build.bin.version.file}"/>
    	<loadfile property="build.timestamp" srcFile="${dashboard-build.bin.timestamp.file}"/>
    	<property name="fullVersion" value="${build.version} (${build.timestamp})"/>
    	<echo>Stamping ${dashboard.name}.mxml with build version "${fullVersion}"</echo>
    	<replace file="${tmpSrcFile}" token="@@BUILDVERSION@@" value="${fullVersion}"/>
    	
    	<!-- Insert the copyright info -->
    	<echo>Inserting rbui copyright "${dashboard.copyright}"</echo>
    	<replace file="${tmpSrcFile}" token="@@COPYRIGHT@@" value="${dashboard.copyright}"/>
        
        <!-- Insert the application title -->
        <echo>Inserting rbui title "${dashboard.title}"</echo>
        <replace file="${tmpSrcFile}" token="@@APPTITLE@@" value="${dashboard.title}"/>
        
        <property name="outputSwf" value="${dashboard-build.bin.swf.dir}/${dashboard.name}.swf"/>
    	    	    	
        <mxmlc file="${tmpSrcFile}" output="${outputSwf}" 
            actionscript-file-encoding="UTF-8" keep-generated-actionscript="true"
            incremental="true" debug="true">
            
            <!-- Get default compiler options. -->
            <load-config filename="${flex.sdk.frameworks.dir}/${flex-config.name}"/>
    
            <!-- List of path elements that form the roots of ActionScript
            class hierarchies. -->
            <source-path path-element="${flex.sdk.frameworks.dir}"/>
        	<source-path path-element="${core.src.dir}"/>
            <source-path path-element="${dashboard.src.dir}"/>
        	
            <!-- List of SWC files or directories that contain SWC files. -->
            <library-path dir="${flex.sdk.frameworks.libs}" append="true">
                <include name="**/*.swc" />
            	<exclude name="**/${flex.sdk.flashlib.name}"/>
                <exclude name="air/*" />
            </library-path>
        	<library-path file="${flex.sdk.flashlib}" append="true"/>
            <library-path dir="${flexlibs.raf.dir}" append="true">
                <include name="**/*.swc" />
            </library-path>
        </mxmlc>
        <echo>Created rbui SWF</echo>
    </target>
    
    <!-- Target to build everything -->
    
    <target name="build" description="Build the catalog client and all dependencies">
        <!-- Clean up build environment -->
        <antcall target="build-clean"/>
        <antcall target="build-init"/>

        <!-- Copy resources into place -->
        <antcall target="resources-include"/>
        
        <!-- Build the swf files -->
        <antcall target="dashboard-build"/>
    	
    	<!-- Build any templates -->
    	<antcall target="build-template"/>
    	
    	<!-- Last minute tasks -->
    	<antcall target="prepare-install"/>
        
        <echo>Completed build</echo>
    </target>
    
    <!-- Target to do a clean build then run the automated tests -->
    <target name="dist" description="Perform a full build">
        <antcall target="build"/>
    </target>
    
</project>
